import './App.css';
import { Tree, TreeNode } from 'react-organizational-chart'
import { useEffect, useState } from 'react';
import TextField from '@mui/material/TextField';
import { Button } from '@mui/material';

function App() {
  const [branchObj,setBranchObj] = useState([])
  const [addPopup,setaddPopup] = useState(false)
  const [selectedBranch,setSelectedBranch] = useState(null)
  useEffect(()=>{
    let ArrBranch = ["Bor Burison",["Odin",["Thor","Thrud",["Thorson","ThorGrandson"]],"Loki","Hema"],"Curl","Vili"]
    setBranchObj([...branchObj,...ArrBranch])
  },[])
  

  const structureRoot = (rootArr) => {
  let rootHtml = rootArr.length > 1 ? <></> : "";
  for(let i=1;i<rootArr.length;i++){
   rootHtml = <>{rootHtml} {structureTree(rootArr[i],"branch-"+i)}</>
  }
  return rootHtml
  }


  const deleteTreeStructure = (selectedBranch)=> {
    let numArr = selectedBranch.split("-").map(e => parseInt(e)).filter(e => e || e===0)
    let objArr = branchObj
    if(numArr.length == 1){
    objArr.splice(numArr[0],1);
    }else{
    for(let i=0;i<numArr.length;i++){
      if(i === numArr.length-3 && numArr[i+2] === 0){
        if(numArr[i]+1 < objArr[numArr[i]].length){
          objArr[numArr[i]] = objArr[numArr[i]].slice(0,numArr[i+1])
          .concat( objArr[numArr[i]].slice(numArr[i+1]+1,objArr[numArr[i]].length))
        }else{
          objArr[numArr[i]] = objArr[numArr[i]].slice(0,numArr[i+1])
        }
        return null
      }else if (i === numArr.length-2 && numArr[i+1] && numArr[i+1] !== 0){
        if(objArr[numArr[i]]){
        objArr[numArr[i]] = objArr[numArr[i]].length === 2 
        ? objArr[numArr[i]].slice(0,numArr[i+1]).join("") 
        : objArr[numArr[i]].slice(0,numArr[i+1])
        .concat( objArr[numArr[i]].slice(numArr[i+1]+1,objArr[numArr[i]].length))
      }
      } else {
      objArr = objArr[numArr[i]]
      }
    }
  }
  }


  const structureTree = (currArr,currBranch) => {
    let leafHtml = <></>
    let html = <></>
    if(typeof (currArr) == "string"){
      leafHtml = <TreeNode label={
        <div id={currBranch} className={"leafNode"}>
        <div onClick={e => {
        deleteTreeStructure(currBranch)
        setBranchObj([...branchObj])
        }} className='deleteIcon'>
          <svg viewBox="0 0 896 512" className='model-deleteicon'>
          <path fill="#000000" opacity="1.000000" stroke="none" 
	          d="M570.713867,143.286133 C577.674988,150.254822 584.458923,156.902802 591.079041,163.710083  C602.650024,175.608292 602.544556,189.444260 590.871155,201.181503 C568.907043,223.265701 546.918640,245.325806 524.943970,267.399445 C519.520081,272.847656 519.496399,272.883789 524.843262,278.249817 C546.592407,300.076569 568.088867,322.165283 590.232056,343.585114 	C602.281982,355.241333 602.114075,372.535522 590.182739,383.066589 	C579.461975,392.529175 569.816711,403.210083 559.696289,413.352875 	C548.039795,425.035065 534.081116,425.141846 522.368835,413.504669 	C500.038055,391.317200 477.768707,369.067932 455.467438,346.850800 	C450.830444,342.231293 450.481171,342.069885 445.858856,346.636719 	C426.308655,365.952240 406.870483,385.381134 387.382812,404.759949 	C383.722595,408.399750 380.099640,412.082001 376.326660,415.602325 	C367.522400,423.816986 353.767029,424.780823 344.911224,416.570160 	C331.732758,404.351746 318.970337,391.625519 306.768616,378.433105 	C298.415192,369.401367 299.833252,355.132202 308.990906,345.813568 	C322.999390,331.558899 337.178131,317.471497 351.290375,303.318878 	C360.111053,294.472992 368.841919,285.533752 377.825439,276.856232 	C380.825500,273.958374 380.721161,272.007355 377.837860,269.137207 	C356.943787,248.338455 336.168427,227.420456 315.359833,206.535858 	C313.244232,204.412521 311.142242,202.275101 309.059723,200.119293 	C299.036774,189.743668 298.608154,175.815109 308.620911,165.202026 	C318.219299,155.028152 328.407684,145.412582 338.269257,135.484558 	C342.629120,131.095276 346.837189,126.539803 353.136566,124.939995 	C363.082825,122.414009 371.460907,125.215767 378.620117,132.390381 	C397.793488,151.604889 416.998383,170.787979 436.222321,189.951889 	C440.799896,194.515106 445.500885,198.954498 449.995026,203.305496 	C452.873657,202.475616 454.229614,200.475342 455.848694,198.857147 	C477.878174,176.839981 499.871826,154.786987 521.899658,132.768143 	C533.698669,120.973900 547.919983,120.864822 559.843140,132.452698 C563.426941,135.935699 566.925293,139.506561 570.713867,143.286133 z"/>
          </svg>
        </div>
        {currArr}
        <div onClick={e => {
        setaddPopup(!addPopup)
        setSelectedBranch(currBranch)
        }} className='addIcon'>
      <svg className='model-addicon' viewBox="0 0 512 512">
      <path fill="#333333" opacity="1.000000" stroke="none" className='model-add' 
        d="M99.002655,261.999207  C99.004349,253.833023 98.960808,246.166306 99.017891,238.500351 C99.113289,225.687393 107.826347,217.023651 120.655846,217.012329     C150.321350,216.986145 179.986877,217.010498 209.652405,216.993729 C216.908844,216.989624 216.987869,216.916321 216.992432,209.802643  C217.011139,180.637100 216.987717,151.471542 217.009720,122.306023  C217.021362,106.875275 224.898239,99.027290 240.337036,99.006439        C251.669922,98.991127 263.002899,98.982170 274.335724,99.009453        C288.995056,99.044746 296.973785,107.113731 296.988037,121.978828        C297.016144,151.311005 296.988190,180.643250 297.009033,209.975433       C297.013916,216.843597 297.156097,216.985962 304.020386,216.990921 C333.019257,217.011917 362.020630,217.227264 391.015961,216.906876        C405.001984,216.752350 415.874268,225.054153 415.106476,240.757385       C414.545532,252.229568 415.037903,263.751373 414.982269,275.250641        C414.917969,288.539673 406.480560,296.949188 393.054016,296.975616 C363.388580,297.034027 333.723022,296.987518 304.057495,297.008667        C297.164154,297.013580 297.014313,297.159973 297.009338,303.987518        C296.988037,333.319733 297.016022,362.651947 296.988251,391.984131        C296.973999,407.038513 288.981445,414.968842 273.872803,414.992584 C262.206604,415.010925 250.528915,414.667786 238.877014,415.075806        C223.951996,415.598511 216.910263,403.301941 216.957275,393.230743        C217.095779,363.565887 217.012009,333.899933 216.992798,304.234406        C216.988159,297.086090 216.910049,297.010864 209.689484,297.00660022 C180.523941,296.989471 151.358383,297.013367 122.192856,296.989563       C107.047516,296.977203 99.045334,289.012207 99.005196,273.997620        C98.994949,270.164795 99.003006,266.331879 99.002655,261.999207  z"/>
     </svg>
     </div>
          </div>}></TreeNode>
        html = leafHtml
    } else {
      for(let i=1;i<currArr.length;i++){
        leafHtml = <>{leafHtml} {structureLeaves(currArr[i],currBranch+"-"+i)} </>
      }
      html = <TreeNode label={<div id={currBranch + "-0"} className={'branchNode'}>
              <div onClick={e => {
        deleteTreeStructure(currBranch)
        setBranchObj([...branchObj])
        }} className='deleteIcon'>
          <svg viewBox="0 0 896 512" className='model-deleteicon'>
          <path fill="#000000" opacity="1.000000" stroke="none" 
	          d="M570.713867,143.286133 C577.674988,150.254822 584.458923,156.902802 591.079041,163.710083  C602.650024,175.608292 602.544556,189.444260 590.871155,201.181503 C568.907043,223.265701 546.918640,245.325806 524.943970,267.399445 C519.520081,272.847656 519.496399,272.883789 524.843262,278.249817 C546.592407,300.076569 568.088867,322.165283 590.232056,343.585114 	C602.281982,355.241333 602.114075,372.535522 590.182739,383.066589 	C579.461975,392.529175 569.816711,403.210083 559.696289,413.352875 	C548.039795,425.035065 534.081116,425.141846 522.368835,413.504669 	C500.038055,391.317200 477.768707,369.067932 455.467438,346.850800 	C450.830444,342.231293 450.481171,342.069885 445.858856,346.636719 	C426.308655,365.952240 406.870483,385.381134 387.382812,404.759949 	C383.722595,408.399750 380.099640,412.082001 376.326660,415.602325 	C367.522400,423.816986 353.767029,424.780823 344.911224,416.570160 	C331.732758,404.351746 318.970337,391.625519 306.768616,378.433105 	C298.415192,369.401367 299.833252,355.132202 308.990906,345.813568 	C322.999390,331.558899 337.178131,317.471497 351.290375,303.318878 	C360.111053,294.472992 368.841919,285.533752 377.825439,276.856232 	C380.825500,273.958374 380.721161,272.007355 377.837860,269.137207 	C356.943787,248.338455 336.168427,227.420456 315.359833,206.535858 	C313.244232,204.412521 311.142242,202.275101 309.059723,200.119293 	C299.036774,189.743668 298.608154,175.815109 308.620911,165.202026 	C318.219299,155.028152 328.407684,145.412582 338.269257,135.484558 	C342.629120,131.095276 346.837189,126.539803 353.136566,124.939995 	C363.082825,122.414009 371.460907,125.215767 378.620117,132.390381 	C397.793488,151.604889 416.998383,170.787979 436.222321,189.951889 	C440.799896,194.515106 445.500885,198.954498 449.995026,203.305496 	C452.873657,202.475616 454.229614,200.475342 455.848694,198.857147 	C477.878174,176.839981 499.871826,154.786987 521.899658,132.768143 	C533.698669,120.973900 547.919983,120.864822 559.843140,132.452698 C563.426941,135.935699 566.925293,139.506561 570.713867,143.286133 z"/>
          </svg>
        </div>
      {currArr[0]}
      <div onClick={e => {
        setaddPopup(!addPopup)
        setSelectedBranch(currBranch+"-0")
        }} className='addIcon'>
      <svg className='model-addicon' viewBox="0 0 512 512">
      <path fill="#333333" opacity="1.000000" stroke="none" className='model-add' 
        d="M99.002655,261.999207  C99.004349,253.833023 98.960808,246.166306 99.017891,238.500351 C99.113289,225.687393 107.826347,217.023651 120.655846,217.012329     C150.321350,216.986145 179.986877,217.010498 209.652405,216.993729 C216.908844,216.989624 216.987869,216.916321 216.992432,209.802643  C217.011139,180.637100 216.987717,151.471542 217.009720,122.306023  C217.021362,106.875275 224.898239,99.027290 240.337036,99.006439        C251.669922,98.991127 263.002899,98.982170 274.335724,99.009453        C288.995056,99.044746 296.973785,107.113731 296.988037,121.978828        C297.016144,151.311005 296.988190,180.643250 297.009033,209.975433       C297.013916,216.843597 297.156097,216.985962 304.020386,216.990921 C333.019257,217.011917 362.020630,217.227264 391.015961,216.906876        C405.001984,216.752350 415.874268,225.054153 415.106476,240.757385       C414.545532,252.229568 415.037903,263.751373 414.982269,275.250641        C414.917969,288.539673 406.480560,296.949188 393.054016,296.975616 C363.388580,297.034027 333.723022,296.987518 304.057495,297.008667        C297.164154,297.013580 297.014313,297.159973 297.009338,303.987518        C296.988037,333.319733 297.016022,362.651947 296.988251,391.984131        C296.973999,407.038513 288.981445,414.968842 273.872803,414.992584 C262.206604,415.010925 250.528915,414.667786 238.877014,415.075806        C223.951996,415.598511 216.910263,403.301941 216.957275,393.230743        C217.095779,363.565887 217.012009,333.899933 216.992798,304.234406        C216.988159,297.086090 216.910049,297.010864 209.689484,297.00660022 C180.523941,296.989471 151.358383,297.013367 122.192856,296.989563       C107.047516,296.977203 99.045334,289.012207 99.005196,273.997620        C98.994949,270.164795 99.003006,266.331879 99.002655,261.999207  z"/>
     </svg>
     </div>
      </div>}> 
    {leafHtml} </TreeNode>
    }
    return html
  }


  const structureLeaves = (arr,branch) => {
    let leafHtml = <></>
    let html = <></>
    if(typeof arr == "string"){
      leafHtml = <TreeNode label={
      <div id={branch} className={"leafNode"}>
        <div onClick={e => {
        deleteTreeStructure(branch)
        setBranchObj([...branchObj])
        }} className='deleteIcon'>
          <svg viewBox="0 0 896 512" className='model-deleteicon'>
          <path fill="#000000" opacity="1.000000" stroke="none" 
	          d="M570.713867,143.286133 C577.674988,150.254822 584.458923,156.902802 591.079041,163.710083  C602.650024,175.608292 602.544556,189.444260 590.871155,201.181503 C568.907043,223.265701 546.918640,245.325806 524.943970,267.399445 C519.520081,272.847656 519.496399,272.883789 524.843262,278.249817 C546.592407,300.076569 568.088867,322.165283 590.232056,343.585114 	C602.281982,355.241333 602.114075,372.535522 590.182739,383.066589 	C579.461975,392.529175 569.816711,403.210083 559.696289,413.352875 	C548.039795,425.035065 534.081116,425.141846 522.368835,413.504669 	C500.038055,391.317200 477.768707,369.067932 455.467438,346.850800 	C450.830444,342.231293 450.481171,342.069885 445.858856,346.636719 	C426.308655,365.952240 406.870483,385.381134 387.382812,404.759949 	C383.722595,408.399750 380.099640,412.082001 376.326660,415.602325 	C367.522400,423.816986 353.767029,424.780823 344.911224,416.570160 	C331.732758,404.351746 318.970337,391.625519 306.768616,378.433105 	C298.415192,369.401367 299.833252,355.132202 308.990906,345.813568 	C322.999390,331.558899 337.178131,317.471497 351.290375,303.318878 	C360.111053,294.472992 368.841919,285.533752 377.825439,276.856232 	C380.825500,273.958374 380.721161,272.007355 377.837860,269.137207 	C356.943787,248.338455 336.168427,227.420456 315.359833,206.535858 	C313.244232,204.412521 311.142242,202.275101 309.059723,200.119293 	C299.036774,189.743668 298.608154,175.815109 308.620911,165.202026 	C318.219299,155.028152 328.407684,145.412582 338.269257,135.484558 	C342.629120,131.095276 346.837189,126.539803 353.136566,124.939995 	C363.082825,122.414009 371.460907,125.215767 378.620117,132.390381 	C397.793488,151.604889 416.998383,170.787979 436.222321,189.951889 	C440.799896,194.515106 445.500885,198.954498 449.995026,203.305496 	C452.873657,202.475616 454.229614,200.475342 455.848694,198.857147 	C477.878174,176.839981 499.871826,154.786987 521.899658,132.768143 	C533.698669,120.973900 547.919983,120.864822 559.843140,132.452698 C563.426941,135.935699 566.925293,139.506561 570.713867,143.286133 z"/>
          </svg>
        </div>
      {arr}
      <div onClick={e => {
        setaddPopup(!addPopup)
        setSelectedBranch(branch)
        }} className='addIcon'>
      <svg className='model-addicon' viewBox="0 0 512 512">
      <path fill="#333333" opacity="1.000000" stroke="none" className='model-add' 
        d="M99.002655,261.999207  C99.004349,253.833023 98.960808,246.166306 99.017891,238.500351 C99.113289,225.687393 107.826347,217.023651 120.655846,217.012329     C150.321350,216.986145 179.986877,217.010498 209.652405,216.993729 C216.908844,216.989624 216.987869,216.916321 216.992432,209.802643  C217.011139,180.637100 216.987717,151.471542 217.009720,122.306023  C217.021362,106.875275 224.898239,99.027290 240.337036,99.006439        C251.669922,98.991127 263.002899,98.982170 274.335724,99.009453        C288.995056,99.044746 296.973785,107.113731 296.988037,121.978828        C297.016144,151.311005 296.988190,180.643250 297.009033,209.975433       C297.013916,216.843597 297.156097,216.985962 304.020386,216.990921 C333.019257,217.011917 362.020630,217.227264 391.015961,216.906876        C405.001984,216.752350 415.874268,225.054153 415.106476,240.757385       C414.545532,252.229568 415.037903,263.751373 414.982269,275.250641        C414.917969,288.539673 406.480560,296.949188 393.054016,296.975616 C363.388580,297.034027 333.723022,296.987518 304.057495,297.008667        C297.164154,297.013580 297.014313,297.159973 297.009338,303.987518        C296.988037,333.319733 297.016022,362.651947 296.988251,391.984131        C296.973999,407.038513 288.981445,414.968842 273.872803,414.992584 C262.206604,415.010925 250.528915,414.667786 238.877014,415.075806        C223.951996,415.598511 216.910263,403.301941 216.957275,393.230743        C217.095779,363.565887 217.012009,333.899933 216.992798,304.234406        C216.988159,297.086090 216.910049,297.010864 209.689484,297.00660022 C180.523941,296.989471 151.358383,297.013367 122.192856,296.989563       C107.047516,296.977203 99.045334,289.012207 99.005196,273.997620        C98.994949,270.164795 99.003006,266.331879 99.002655,261.999207  z"/>
     </svg>
     </div>
        </div>}></TreeNode>
      html = leafHtml
    }
    else{
      for(let i=1;i<arr.length;i++){
        leafHtml = <>{leafHtml} {structureLeaves(arr[i],branch+"-"+i)} </>
      }
      html = <TreeNode label={<div id={branch + "-0"} className={'branchNode'}>
        <div onClick={e => {
        deleteTreeStructure(branch)
        setBranchObj([...branchObj])
        }} className='deleteIcon'>
          <svg viewBox="0 0 896 512" className='model-deleteicon'>
          <path fill="#000000" opacity="1.000000" stroke="none" 
	          d="M570.713867,143.286133 C577.674988,150.254822 584.458923,156.902802 591.079041,163.710083  C602.650024,175.608292 602.544556,189.444260 590.871155,201.181503 C568.907043,223.265701 546.918640,245.325806 524.943970,267.399445 C519.520081,272.847656 519.496399,272.883789 524.843262,278.249817 C546.592407,300.076569 568.088867,322.165283 590.232056,343.585114 	C602.281982,355.241333 602.114075,372.535522 590.182739,383.066589 	C579.461975,392.529175 569.816711,403.210083 559.696289,413.352875 	C548.039795,425.035065 534.081116,425.141846 522.368835,413.504669 	C500.038055,391.317200 477.768707,369.067932 455.467438,346.850800 	C450.830444,342.231293 450.481171,342.069885 445.858856,346.636719 	C426.308655,365.952240 406.870483,385.381134 387.382812,404.759949 	C383.722595,408.399750 380.099640,412.082001 376.326660,415.602325 	C367.522400,423.816986 353.767029,424.780823 344.911224,416.570160 	C331.732758,404.351746 318.970337,391.625519 306.768616,378.433105 	C298.415192,369.401367 299.833252,355.132202 308.990906,345.813568 	C322.999390,331.558899 337.178131,317.471497 351.290375,303.318878 	C360.111053,294.472992 368.841919,285.533752 377.825439,276.856232 	C380.825500,273.958374 380.721161,272.007355 377.837860,269.137207 	C356.943787,248.338455 336.168427,227.420456 315.359833,206.535858 	C313.244232,204.412521 311.142242,202.275101 309.059723,200.119293 	C299.036774,189.743668 298.608154,175.815109 308.620911,165.202026 	C318.219299,155.028152 328.407684,145.412582 338.269257,135.484558 	C342.629120,131.095276 346.837189,126.539803 353.136566,124.939995 	C363.082825,122.414009 371.460907,125.215767 378.620117,132.390381 	C397.793488,151.604889 416.998383,170.787979 436.222321,189.951889 	C440.799896,194.515106 445.500885,198.954498 449.995026,203.305496 	C452.873657,202.475616 454.229614,200.475342 455.848694,198.857147 	C477.878174,176.839981 499.871826,154.786987 521.899658,132.768143 	C533.698669,120.973900 547.919983,120.864822 559.843140,132.452698 C563.426941,135.935699 566.925293,139.506561 570.713867,143.286133 z"/>
          </svg>
        </div>
        {arr[0]}
      <div onClick={e => {
        setaddPopup(!addPopup)
        setSelectedBranch(branch+"-0")
        }} className='addIcon'>
      <svg className='model-addicon' viewBox="0 0 512 512">
      <path fill="#333333" opacity="1.000000" stroke="none" className='model-add' 
        d="M99.002655,261.999207  C99.004349,253.833023 98.960808,246.166306 99.017891,238.500351 C99.113289,225.687393 107.826347,217.023651 120.655846,217.012329     C150.321350,216.986145 179.986877,217.010498 209.652405,216.993729 C216.908844,216.989624 216.987869,216.916321 216.992432,209.802643  C217.011139,180.637100 216.987717,151.471542 217.009720,122.306023  C217.021362,106.875275 224.898239,99.027290 240.337036,99.006439        C251.669922,98.991127 263.002899,98.982170 274.335724,99.009453        C288.995056,99.044746 296.973785,107.113731 296.988037,121.978828        C297.016144,151.311005 296.988190,180.643250 297.009033,209.975433       C297.013916,216.843597 297.156097,216.985962 304.020386,216.990921 C333.019257,217.011917 362.020630,217.227264 391.015961,216.906876        C405.001984,216.752350 415.874268,225.054153 415.106476,240.757385       C414.545532,252.229568 415.037903,263.751373 414.982269,275.250641        C414.917969,288.539673 406.480560,296.949188 393.054016,296.975616 C363.388580,297.034027 333.723022,296.987518 304.057495,297.008667        C297.164154,297.013580 297.014313,297.159973 297.009338,303.987518        C296.988037,333.319733 297.016022,362.651947 296.988251,391.984131        C296.973999,407.038513 288.981445,414.968842 273.872803,414.992584 C262.206604,415.010925 250.528915,414.667786 238.877014,415.075806        C223.951996,415.598511 216.910263,403.301941 216.957275,393.230743        C217.095779,363.565887 217.012009,333.899933 216.992798,304.234406        C216.988159,297.086090 216.910049,297.010864 209.689484,297.00660022 C180.523941,296.989471 151.358383,297.013367 122.192856,296.989563       C107.047516,296.977203 99.045334,289.012207 99.005196,273.997620        C98.994949,270.164795 99.003006,266.331879 99.002655,261.999207  z"/>
     </svg>
     </div></div>}> 
      {leafHtml} </TreeNode>
    }
    return html
  }
  

  return (
    <div className="App">
    {addPopup && <>
    <div id="add-branch" className='add-popup'>
      <div className='popup-layer' onClick={e => {setaddPopup(false)}}></div>
      <div className='add-popup-menu'>
      <div className='popup-inputbox'>
        <TextField id="branch-Input" label="Name of the child node" variant="outlined" className='popup-input' />
      </div>
      <div className='popup-ok'>
        <div>
        <Button onClick={e => {
        let numArr = selectedBranch.split("-").map(e => parseInt(e)).filter(e => e || e===0)
        let objArr = branchObj
        setaddPopup(false)
        for(let i=0;i<numArr.length;i++){
          if(i === numArr.length-1 && numArr[i] === 0){
            objArr.push(document.getElementById("branch-Input").value)
            setBranchObj([...branchObj])
          }else if (i === numArr.length-1 && numArr[i] !== 0){
            objArr[numArr[i]] = [objArr[numArr[i]]]
            objArr[numArr[i]].push(document.getElementById("branch-Input").value)
            setBranchObj([...branchObj])
          } else {
          objArr = objArr[numArr[i]]
          }
        }
        }} variant='contained' color='success' >Ok</Button>
        </div>
          <div>
            <Button variant="outlined" color="error" onClick={e => { setaddPopup(false)}}>
            Cancel
            </Button>
            </div>
        </div>
        </div>
    </div>
    </>}
    <Tree label={<div className='rootNode'> {branchObj[0]} </div>}>
      {structureRoot(branchObj)}
    </Tree>
    </div>
  );
}

export default App;
